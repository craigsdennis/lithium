import {Coroutine} from './coroutine.li'

function validate(tokens)
	for(Token token of tokens)
		if ()
		else
			for

export macro SubroutineLiteral(Identifier("subroutine"), Whitespace, [Identifier]: name, [Gap], ArgumentsList := arguments, [Gap], Body := body)
	return CoroutineLiteral(name, arguments, validate(body))

export macro ProcedureLiteral(Identifier("procedure"), Whitespace, [Identifier]: name, [Gap], ArgumentsList := arguments, [Gap], Body := body)
	return CoroutineLiteral(name, arguments, validate(body))

export macro FunctionLiteral(Identifier("function"), Whitespace, [Identifier]: name, [Whitespace], ArgumentsList := arguments, [Gap], Body := body)
	return CoroutineLiteral(name, arguments, validate(body))

export class Subroutine extends Coroutine implements Callable

export constant Procedure := Subroutine

export constant Function := Subroutine

export constant subroutine := Subroutine

export alias procedure: Subroutine

export alias function: Subroutine