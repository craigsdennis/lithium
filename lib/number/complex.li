export class Complex<Uint size: âˆž> extends Number

	[constructor](Integer x)
		this[constructor].call(this, x as Float<size>)

	[constructor](Float x)
		this[constructor].call(this, x as Float<size>, 0.0 as Float<size>)

	[constructor](Complex x)
		this[constructor].call(this, x.real as Float<size>, x.imaginary as Float<size>)

	[constructor](Float real, Float imaginary)
		constant this[storage]: Pair<Float<size>, Float<size>>(real, imaginary)

	[moreThan](lhs, rhs)
		throw new TypeError("Complex numbers can't be compared for size.")

	[lessThan](any lhs, any rhs)
		throw new TypeError("Complex numbers can't be compared for size.")